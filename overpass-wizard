#!/usr/bin/env node

var opt = require('optimist')
        .usage('Usage: $0 SEARCH')
        .string('bbox').describe('bbox','string to replace {{bbox}} shortcuts with')
        .string('no-expand').describe('no-expand','don\'t expand query placeholders/shortcuts, such as {{bbox}}, {{geocodeArea}}, etc.')
        .boolean('version').describe('version','display software version')
        .boolean('help').describe('help','print this help message'),
    argv = opt.argv,
    concat = require('concat-stream'),
    Promise = require('promise'),
    expand = require('./expand'),
    wizard = require('.');

if (argv.help) {
    return opt.showHelp();
}
if (argv.version) {
    return process.stdout.write(require('./package.json').version+'\n');
}

var search = argv._.join(' ');

if (search.length === 0) {
  // read query from stdin instead
  process.stdin.pipe(concat(generateAndPrintQuery));
} else {
  generateAndPrintQuery(search);
}


function generateAndPrintQuery(search) {
  if (typeof search !== 'string') search = search.toString().trim();
  var overpassQuery = wizard.construct_query(search);
  if (overpassQuery === false) {
    return process.exit(1);
  }
  if (argv.expand !== false) {
    // expand shortcuts
    if (argv.bbox) overpassQuery = overpassQuery.replace(/{{bbox}}/g, argv.bbox);
    var shortcutRegexp = "{{(date|geocodeArea|geocodeCoords):([\\s\\S]*?)}}";
    var shortcuts = overpassQuery.match(new RegExp(shortcutRegexp, 'g')) || [];
    Promise.all(shortcuts.map(function(shortcut) {
      shortcut = shortcut.match(new RegExp(shortcutRegexp));
      return expand[shortcut[1]](shortcut[2]);
    })).then(function(expansions) {
      expansions.forEach(function(expansion, index) {
        overpassQuery = overpassQuery.replace(shortcuts[index], expansion);
      });
      process.stdout.write(overpassQuery);
    }).catch(function(err) {
      console.error(err);
    });
  } else {
    process.stdout.write(overpassQuery);
  }
}
